{
	"info": {
		"_postman_id": "fb61599c-36c3-48d7-9fac-22722fbcf8cd",
		"name": "Collectibles store spark",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48954560",
		"_collection_link": "https://ramsalue-5809832.postman.co/workspace/Luis-E.-Ramirez-(ramsalue)'s-Wo~cdc23105-5285-4ecc-85bf-8776dac31a99/collection/48954560-fb61599c-36c3-48d7-9fac-22722fbcf8cd?action=share&source=collection_link&creator=48954560"
	},
	"item": [
		{
			"name": "Users endpoints",
			"item": [
				{
					"name": "Add New User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"User has correct ID from URL\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"user4\");\r",
									"});\r",
									"\r",
									"pm.test(\"User has all provided fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Maria Garcia\");\r",
									"    pm.expect(jsonData.email).to.eql(\"maria@example.com\");\r",
									"    pm.expect(jsonData.role).to.eql(\"buyer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Maria Garcia\",\r\n  \"email\": \"maria@example.com\",\r\n  \"role\": \"buyer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Duplicate ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.true;\r",
									"    pm.expect(jsonData.message).to.include(\"already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"email\": \"test@example.com\",\r\n  \"role\": \"buyer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Missing Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions name is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"name is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test@example.com\",\r\n  \"role\": \"buyer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions invalid email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"email\": \"invalidemail\",\r\n  \"role\": \"buyer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Invalid Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions invalid role\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Invalid role\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"email\": \"test@example.com\",\r\n  \"role\": \"superuser\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user7"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions body is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"body is required\");\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:4567/users/user8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"User ID remains unchanged\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"user2\");\r",
									"});\r",
									"\r",
									"pm.test(\"User fields are updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"John Updated\");\r",
									"    pm.expect(jsonData.email).to.eql(\"john.updated@example.com\");\r",
									"    pm.expect(jsonData.role).to.eql(\"seller\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"name\": \"Test User Updated\",\r\n     \"email\": \"updated@example.com\",\r\n     \"role\": \"seller\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions user not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"email\": \"test@example.com\",\r\n  \"role\": \"buyer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions email is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"email is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Ramon Updated\",\r\n  \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions email format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Ramon Updated\",\r\n  \"email\": \"notanemail\",\r\n  \"role\": \"seller\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4567/users/user3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 3 users\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									"pm.test(\"First user has required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0]).to.have.property('role');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Users have valid roles\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var validRoles = ['admin', 'buyer', 'seller'];\r",
									"    jsonData.forEach(function(user) {\r",
									"        pm.expect(validRoles).to.include(user.role);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"User has correct ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"user1\");\r",
									"});\r",
									"\r",
									"pm.test(\"User has all required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('role');\r",
									"});\r",
									"\r",
									"pm.test(\"User role is admin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.role).to.eql(\"admin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email format is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID - Buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has correct ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"user2\");\r",
									"});\r",
									"\r",
									"pm.test(\"User role is buyer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.role).to.eql(\"buyer\");\r",
									"});\r",
									"\r",
									"pm.test(\"User name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.include(\"John\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID - Seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has correct ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"user3\");\r",
									"});\r",
									"\r",
									"pm.test(\"User role is seller\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.role).to.eql(\"seller\");\r",
									"});\r",
									"\r",
									"pm.test(\"User name contains Ramon\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.include(\"Ramon\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.true;\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions user not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"    pm.expect(jsonData.message).to.include(\"user999\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes timestamp\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.timestamp).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User - Empty ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is 0 or not present\", function () {\r",
									"    var contentLength = pm.response.headers.get(\"Content-Length\");\r",
									"    if (contentLength) {\r",
									"        pm.expect(parseInt(contentLength)).to.equal(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions user not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"    pm.expect(jsonData.message).to.include(\"user999\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify User Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"User no longer exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User Exists - Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is plain text OK\", function () {",
									"    pm.expect(pm.response.text()).to.eql('OK');",
									"});",
									"",
									"pm.test(\"Exists property is true\", function () {",
									"    // If response is JSON, check for 'exists' property",
									"    let isJson = false;",
									"    try {",
									"        var jsonData = pm.response.json();",
									"        isJson = true;",
									"    } catch (e) {",
									"        isJson = false;",
									"    }",
									"    if (isJson) {",
									"        pm.expect(jsonData).to.have.property('exists');",
									"        pm.expect(jsonData.exists).to.be.true;",
									"    } else {",
									"        pm.expect(pm.response.text()).to.eql('OK'); // fallback for plain text",
									"    }",
									"});",
									"",
									"pm.test(\"Response contains userId\", function () {",
									"    let isJson = false;",
									"    let jsonData;",
									"    try {",
									"        jsonData = pm.response.json();",
									"        isJson = true;",
									"    } catch (e) {",
									"        isJson = false;",
									"    }",
									"    if (isJson) {",
									"        pm.expect(jsonData).to.have.property('userId');",
									"    } else {",
									"        pm.expect(true, 'Response is not JSON, skipping userId check').to.be.true;",
									"    }",
									"});",
									"",
									"pm.test(\"Response contains timestamp\", function () {",
									"    let isJson = false;",
									"    let jsonData;",
									"    try {",
									"        jsonData = pm.response.json();",
									"        isJson = true;",
									"    } catch (e) {",
									"        isJson = false;",
									"    }",
									"    if (isJson) {",
									"        pm.expect(jsonData, 'Response JSON should have a timestamp property').to.have.property('timestamp');",
									"        const timestamp = jsonData.timestamp;",
									"        // Check for ISO 8601 date string",
									"        const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})$/;",
									"        // Check for numeric timestamp (milliseconds or seconds)",
									"        const isNumeric = typeof timestamp === 'number' && isFinite(timestamp);",
									"        const isIso8601 = typeof timestamp === 'string' && iso8601Regex.test(timestamp);",
									"        pm.expect(isIso8601 || isNumeric, `timestamp property should be a valid ISO 8601 string or a numeric timestamp, got: ${timestamp}`).to.be.true;",
									"    } else {",
									"        pm.expect(true, 'Response is not JSON, skipping timestamp check').to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User Exists - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Exists property is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.exists).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains userId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(\"user999\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User1 Exists",
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/users/user1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"users",
								"user1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Item endpoints",
			"item": [
				{
					"name": "Get All Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 7 items\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.lengthOf(7);\r",
									"});\r",
									"\r",
									"pm.test(\"First item has required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('description');\r",
									"    pm.expect(jsonData[0]).to.have.property('price');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/items",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item by ID - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Item has correct ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"item1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Item has all required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"});\r",
									"\r",
									"pm.test(\"Item name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.include(\"Peso Pluma\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/items/item1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"items",
								"item1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item by ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.be.true;\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message mentions item not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"    pm.expect(jsonData.message).to.include(\"item999\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes timestamp\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timestamp');\r",
									"    pm.expect(jsonData.timestamp).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/items/item999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"items",
								"item999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item item2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Item has correct ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(\"item2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Item has all required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"});\r",
									"\r",
									"pm.test(\"Item name is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.include(\"Peso Pluma\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/items/item2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"items",
								"item2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utility endpoints",
			"item": [
				{
					"name": "Root endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567"
						}
					},
					"response": []
				},
				{
					"name": "Health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4567/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4567",
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}